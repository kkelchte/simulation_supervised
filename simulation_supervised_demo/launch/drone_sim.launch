<?xml version="1.0"?>
<launch>
  <!-- Define parameters from arguments -->
  <arg name="log_folder" default="tmp"/> <!-- logfolder defines where .pid file is saved for fsm to kill in ~/tensorflow/log-->
  <param name="log_folder" value="$(arg log_folder)"/>
  

  <arg name="random_seed" default="1234"/> 
  <param name="random_seed" value="$(arg random_seed)"/>

  <arg name="world_name" default="objects"/> <!-- worldname is used to load correct config, name logging and find modified logname -->
  <param name="world_name" value="$(arg world_name)"/>
  <arg name="world_file" default="$(find simulation_supervised_demo)/worlds/$(arg world_name).world"/> <!-- worldfile defines the actual gazebo world file loaded -->
  <param name="world_file" value="$(arg world_file)"/>
  <arg name="world_config" default="$(find simulation_supervised)/config/environment/$(arg world_name).yaml"/> <!-- yaml with extra ros params to load -->
  
  <arg name="evaluate" default="false"/> <!-- this parameter is used by rosinterface to ensure the evaluation model is used -->
  <param name="/evaluate" value="$(arg evaluate)"/>
  <arg name="graphics" default="false"/> 
  <param name="graphics" value="$(arg graphics)"/>
  
  <arg name="data_location" default="tmp"/> <!-- used by create_dataset node to save all recorded data -->
  <param name="data_location" value="$(arg data_location)"/>
  <arg name="save_images" default="false"/>
  <param name="save_images" value="$(arg save_images)"/>
  
  <arg name="background" default=""/> <!-- used by create_dataset node to save all recorded data -->
  <param name="background" value="$(arg background)"/>

  <arg name="full" default="false"/>
  <group if="$(arg full)">
    <!-- Load parameters for turtlesim as a full demonstration-->
    <include file="$(find simulation_supervised)/launch/load_params.launch">
      <arg name="robot_config" value="drone_sim.yaml"/>
    </include>
  </group>
  
  <!-- Load parameters for environment-->
  <!-- <rosparam command="load" file="$(find simulation_supervised)/config/environment/debug.yaml"/>  -->
  <rosparam command="load" file="$(arg world_config)"/> 

  <!-- Load parameters for fsm-->
  <arg name="fsm_config" default="console_fsm"/>
  <rosparam command="load" file="$(find simulation_supervised)/config/fsm/$(arg fsm_config).yaml"/> 
  
  <!-- Gazebo with world -->
  <!-- We resume the logic in empty_world.launch, changing only the name of the world to be launched-->
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <!--use line for spawning world from .dae mesh in gz model folder-->
    <arg name="world_name" value="$(arg world_file)"/>
    <!-- <arg name="gui" value="false"/> -->
    <arg name="gui" value="$(arg graphics)"/>
    <arg name="headless" default="true"/>
    <arg name="extra_gazebo_args" default="--seed $(arg random_seed)"/>
    <!-- <arg name="paused" default="true"/>     -->
  </include>

  <!-- Spawn simulated quadrotor uav -->
  <arg name="x" default="0"/>
  <arg name="y" default="0"/>
  <arg name="z" default="0.1"/>
  <arg name="Yspawned" default="1.57"/>
  <include file="$(find hector_quadrotor_gazebo)/launch/spawn_quadrotor.launch">
    <!-- Note: do not change quadrotor model with model argument as then pose estimation fails to start and /ground_truth/state will not be published on which fsm.py depends to start the simulation.-->
    <arg name="x" value="$(arg x)"/>
    <arg name="y" value="$(arg y)"/>
    <arg name="z" value="$(arg z)"/>
    <arg name="Y" default="$(arg Yspawned)"/>
  </include>

  <!-- UAV flies at a certain height -->
  <arg name="starting_height" default="1"/>
  <param name="starting_height" value="$(arg starting_height)"/>
  

  <!-- start behavior arbitration -->
  <!-- <arg name="starting_height" default="0.5"/> -->
  <!-- <arg name="speed" default="1.3"/>
  <include file="$(find simulation_supervised_control)/launch/behaviorarbitration.launch">
    <arg name="goal_angle" value="-1"/>
    <arg name="speed" value="$(arg speed)"/>
  </include>
   -->
  <!-- KeyBoard node -->
  <node name="teleop_twist_keyboard" pkg="simulation_supervised_tools" type="teleop_twist_keyboard.py" output="screen"/>

  
  <node name="behavior_arbitration" pkg="simulation_supervised_control" type="behavior_arbitration.py" output="screen"/>
  
  <!-- Console: simple (only overtake and go) -->
  <include file="$(find simulation_supervised_tools)/launch/joy_teleop.launch">
    <arg name="joy_config" value="simple_console"/> 
  </include>
  
  <!-- FSM node -->
  <node name="fsm" pkg="simulation_supervised_tools" type="fsm.py" output="screen"/>

  <!-- Create data -->
  <node name="create_dataset" pkg="simulation_supervised_tools" type="create_dataset.py" output="screen"/>

  <!-- Keep position by listening to gt_info-topic -->
  <node name="ground_truth_listener" pkg="simulation_supervised_tools" type="ground_truth_listener.py" output="screen"/>

  <!-- Visualizations -->
  <!-- Show control -->
  <node name="show_control" pkg="simulation_supervised_tools" type="show_control.py" output="screen"/>

</launch>
